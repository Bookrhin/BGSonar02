name: ios/feature-branch

#
#   GOOD TO KNOW
#
#   This workflow is supposed to help ensure the quality
#   of the code changes attempted to be merged to branch
#   `develop`.
#
#   However, what determines the expected quality level
#   are tasks performed by Fastlane, which this workflow
#   uses. Such Fastlane setup IS NOT PROVIDED as part of
#   this sample.
#

#
#   TRIGGERS
#
#   As seen below, this workflow is triggered given a few events happen:
#     1. When a Pull Request to branch `develop` is first opened;
#     2. Whenever new changes are pushed to an existing Pull Request to branch `develop`.
#
on:
  pull_request:
    types: [ opened, synchronize ]
    branches: [ main ]

#
#   XCODE
#
#   Given this workflow is for an iOS project, we specify the
#   `DEVELOPER_DIR` of a given Xcode version available on Github's
#   macOS runner.
#
#   For more information on versions available, see:
#   https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11.0-Readme.md
#
env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer


jobs:
  #
  #   JOBS
  #
  #   We define a single job, named `build`.
  #   This has proven sufficient for our needs, but there can
  #   be multiple jobs. They run either in parallel or they can
  #   depend on each other.
  #
  #   For more details, see:
  #   https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idneeds
  #
  build:
    runs-on: macos-latest
    steps:

    #
    #   CHECKOUT
    #
    #   This action checks-out your repository under $GITHUB_WORKSPACE,
    #   so your workflow can access it.
    #
    #   This is mandatory, as we're gonna perform tasks using the code
    #   within the repository.
    #
    - uses: actions/checkout@v2

    #
    #   CACHING PODS
    #
    #   This step isn't mandatory, but it saves time.
    #   It caches the `Pods/` folder to improve workflow execution time.
    # 
    - uses: actions/cache@v1
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
    #   ⬆️
    #   WHAT THIS IS USUALLY RESERVED FOR
    #
    #   Prior to using Fastlane to perform a certain amount of tasks,
    #   either using one or multiple lanes, you can use steps to
    #   install dependencies that are not available on Github's macOS
    #   runner by default. Or use other actions directly here.
    #   ⬇️
    

    #
    #   FASTLANE EXECUTION
    #
    #   `run_all_but_deploy` is a lane created to perform all the
    #   quality related tasks to the codebase but not deploy the
    #   application anywhere.
    #
    #   It is merely an example. You can run fastlane with your own
    #   lanes or use something completely different.
    #
    #   It is also possible to run shell commands with your own step:
    #
    #   ```
    #   - name: Clean install dependencies and build
    #     run: |
    #       npm ci
    #       npm run build
    #   ```
    #
    #   For more information, see:
    #   https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idsteps
    #
    - name: fastlane run_all_but_deploy
      uses: maierj/fastlane-action@v1.4.0
      #
      #   ENVIRONMENT VARIABLES
      #
      #   Environment variables can be set at any moment:
      #     - Globally, as we see at the top with `DEVELOPER_DIR`
      #     - Or locally to a step, as below.
      env:
        AN_ENVIRONMENT_VARIABLE: ${{ secrets.A_SECRET_VALUE }}
      with:
        lane: run_all_but_deploy
        skip-tracking: false
